// Jenkinsfile for Image to Text Converter Flask App

pipeline {
    agent any

    // Environment variables
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE_NAME = 'ayush5626/image-to-text-converter-app' // Make sure this is your correct Docker Hub username/repo name
        DOCKER_CREDENTIAL_ID = 'docker-hub-credentials'
        APP_CONTAINER_NAME = 'image-to-text-converter' // Define a consistent name for your running container
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                script {
                    checkout scm
                    echo "Source code checked out successfully."
                }
            }
        }

        stage('Clean Docker Environment') {
            steps {
                script {
                    echo "Attempting to stop and remove old Docker container '${APP_CONTAINER_NAME}'..."
                    // Stop the old running container if it exists. '|| true' prevents pipeline failure if it's not running.
                    sh "docker stop ${APP_CONTAINER_NAME} || true"
                    echo "Attempting to remove old Docker container '${APP_CONTAINER_NAME}'..."
                    // Remove the old container. '|| true' prevents pipeline failure if it doesn't exist.
                    sh "docker rm ${APP_CONTAINER_NAME} || true"

                    echo "Attempting to remove old 'latest' Docker image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"
                    // Remove the previous 'latest' image. This is important to ensure the new 'latest' tag is clean.
                    // '|| true' prevents pipeline failure if the image is not found or in use.
                    sh "docker rmi ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest || true"

                    // Optional: You can also prune dangling images to free up space. Use with caution.
                    // sh "docker image prune -f"
                    echo "Docker environment cleanup completed."
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // The build command will create an image tagged with the build number
                    echo "Building Docker image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
                    sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER} ."
                    echo "Docker image built successfully."
                }
            }
        }

        stage('Login to Docker Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIAL_ID}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin ${DOCKER_REGISTRY}"
                        echo "Logged into Docker registry."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker image with build number tag: ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"

                    // After pushing the specific build, tag and push it as 'latest'
                    echo "Tagging and pushing image as 'latest': ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"
                    sh "docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"
                    sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"

                    echo "Docker image pushed successfully."
                }
            }
        }

        // --- Optional Stage: Deploy to Environment ---
        // This is where you would run your new container.
        // Make sure to use the APP_CONTAINER_NAME defined in environment.
        stage('Deploy to Production') {
            steps {
                script {
                    echo "Deploying application to production environment..."
                    // Example: Run the new container
                    // Make sure port 5000 is available on the host, or change the host port.
                    sh "docker run -d --name ${APP_CONTAINER_NAME} -p 5000:5000 ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"
                    echo "Application container ${APP_CONTAINER_NAME} started with latest image."
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
            sh "docker logout ${DOCKER_REGISTRY}" // Clean up Docker login session
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed! Check logs for errors."
        }
        unstable {
            echo "Pipeline is unstable, some steps might have failed."
        }
    }
}
