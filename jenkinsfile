// Jenkinsfile for Cloud OCR Converter - Phase 1 Local Testing Only

pipeline {
    agent any // Jenkins will use any available agent

    // Environment variables specific to this simplified pipeline
    environment {
        // Docker Hub settings for your Flask app image
        DOCKER_REGISTRY = 'docker.io'
        // IMPORTANT: Replace 'your_docker_hub_username' with your actual Docker Hub username
        DOCKER_IMAGE_NAME = 'ayush5626/image-to-text-converter-app'
        DOCKER_CREDENTIAL_ID = 'docker-hub-credentials' // Jenkins credential ID for Docker Hub login (Username with password)

        // Name for the running Flask container (for easier management)
        FLASK_APP_CONTAINER_NAME = 'cloud-ocr-flask-app'

        // AWS details (only used by build_opencv_layer.sh in this phase, not directly for deployment)
        S3_BUCKET_NAME = 'ocr-bucket--0632' // Your S3 bucket name for layer uploads
        AWS_REGION = 'us-east-1' // e.g., 'us-east-1', 'ap-south-1'

        // AWS Credentials for the 'build_opencv_layer.sh' script to upload to S3.
        // If these are not configured in Jenkins, the S3 upload part of the script will fail,
        // but the layer zip will still be built locally.
        AWS_ACCESS_KEY_ID_CRED = credentials('jenkins-aws-access-key-id') // Jenkins Secret Text Credential ID
        AWS_SECRET_ACCESS_KEY_CRED = credentials('jenkins-aws-secret-access-key') // Jenkins Secret Text Credential ID
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                script {
                    checkout scm // Checks out the code from your Git repository
                    echo "Source code checked out successfully."
                }
            }
        }

        stage('Clean Docker Environment') {
            steps {
                script {
                    echo "Attempting to stop and remove old Docker container '${FLASK_APP_CONTAINER_NAME}'..."
                    // '|| true' makes the command succeed even if container doesn't exist (e.g., first run)
                    sh "docker stop ${FLASK_APP_CONTAINER_NAME} || true"
                    echo "Attempting to remove old Docker container '${FLASK_APP_CONTAINER_NAME}'..."
                    sh "docker rm ${FLASK_APP_CONTAINER_NAME} || true"
                    echo "Attempting to remove old Docker image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"
                    sh "docker rmi ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest || true" // Remove if it exists
                    echo "Docker environment cleanup completed."
                }
            }
        }

        stage('Build Flask Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"
                    // Build the Docker image from the Dockerfile in the current directory
                    sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest ."
                    echo "Docker image built successfully."
                }
            }
        }

        stage('Run Flask Docker Container Locally') {
            steps {
                script {
                    echo "Running Flask app in Docker container on Jenkins agent..."
                    // Run the container, mapping port 5000 (app) to 5000 (host)
                    // The app will be accessible at http://<Jenkins_Agent_IP>:5000 if firewall allows
                    sh "docker run -d --name ${FLASK_APP_CONTAINER_NAME} -p 5000:5000 ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:latest"
                    echo "Flask Docker container started. (Check Jenkins agent host IP on port 5000)"
                }
            }
        }

        stage('Build Custom OpenCV Lambda Layer Artifact') {
            steps {
                script {
                    echo "Building custom OpenCV layer artifact locally (requires Docker Desktop and AWS CLI on agent)..."
                    // This script builds the layer ZIP and *attempts* to upload it to S3.
                    // If AWS CLI credentials are not configured in Jenkins, the S3 upload step will fail,
                    // but the ZIP artifact will still be created locally in the workspace.
                    withCredentials([string(credentialsId: 'jenkins-aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                                     string(credentialsId: 'jenkins-aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh "export AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}'"
                        sh "export AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}'"
                        sh "export AWS_DEFAULT_REGION='${AWS_REGION}'"
                        sh "S3_BUCKET_NAME=${S3_BUCKET_NAME} ./build_opencv_layer.sh"
                    }
                    echo "Custom OpenCV layer build script executed. Check logs for S3 upload status."
                }
            }
        }

        // --- Optional: Add a stage to stop the container when the build is done ---
        // This is good practice for clean up on a local Jenkins agent.
        stage('Stop Flask Docker Container') {
            steps {
                script {
                    echo "Stopping Flask Docker container..."
                    sh "docker stop ${FLASK_APP_CONTAINER_NAME} || true" // Stop gracefully
                    sh "docker rm ${FLASK_APP_CONTAINER_NAME} || true"   // Remove
                    echo "Flask Docker container stopped and removed."
                }
            }
        }
    }

    post {
        always {
            echo "Phase 1 Jenkins pipeline finished."
        }
        failure {
            echo "Phase 1 Jenkins pipeline failed. Review logs for details."
        }
        success {
            echo "Phase 1 Jenkins pipeline succeeded!"
        }
    }
}
